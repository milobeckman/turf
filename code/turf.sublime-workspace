{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"scree",
				"screen_height"
			],
			[
				"remove",
				"remove_modals"
			],
			[
				"de",
				"dendro_data"
			],
			[
				"clust",
				"clust_json"
			],
			[
				"select",
				"selectAll"
			],
			[
				"attr",
				"attributes"
			],
			[
				"data",
				"dataset"
			],
			[
				"custom-",
				"custom-color"
			],
			[
				"mema",
				"mema_tensor"
			],
			[
				"meta",
				"meta_path"
			],
			[
				"sum",
				"sum_params"
			],
			[
				"col",
				"columns_variance"
			],
			[
				"dail",
				"daily_data"
			],
			[
				"hou",
				"hourly_data"
			],
			[
				"hour",
				"hourly_params"
			],
			[
				"hourly_",
				"hourly_data"
			],
			[
				"star",
				"start_date"
			],
			[
				"sample",
				"sample_json"
			],
			[
				"api",
				"api_key"
			],
			[
				"start",
				"start"
			],
			[
				"get",
				"get_url"
			],
			[
				"end",
				"end_date"
			],
			[
				"en",
				"end_date"
			],
			[
				"st",
				"start_date"
			],
			[
				"loc",
				"location"
			],
			[
				"city",
				"city2code"
			],
			[
				"json",
				"json_file"
			],
			[
				"scorad_",
				"scorad_28"
			],
			[
				"scor",
				"scorad_0"
			],
			[
				"x",
				"xml_data"
			],
			[
				"sco",
				"score_fields"
			],
			[
				"mea",
				"meta_fields"
			],
			[
				"pre",
				"pre_data"
			],
			[
				"min",
				"min_pca"
			],
			[
				"hist_",
				"hist_cols"
			],
			[
				"inde",
				"index_col"
			],
			[
				"fra",
				"frames_fold"
			],
			[
				"met",
				"meta_cols"
			],
			[
				"in",
				"indv"
			],
			[
				"drop",
				"drop_cols"
			],
			[
				"con",
				"consensus_genes"
			],
			[
				"gene",
				"genelists"
			],
			[
				"df",
				"df_stat5"
			],
			[
				"fc",
				"fc_mat"
			],
			[
				"cd",
				"cd"
			],
			[
				"dn",
				"dn_terms"
			],
			[
				"up",
				"up_terms"
			],
			[
				"row",
				"row_id"
			],
			[
				"col_",
				"col_id"
			],
			[
				"sig",
				"signatures"
			],
			[
				"out",
				"output_json"
			],
			[
				"flatt",
				"flattened"
			],
			[
				"roll",
				"roll_canvas"
			],
			[
				"j",
				"json2table"
			],
			[
				"v",
				"v_shift"
			],
			[
				"h",
				"h_shift"
			],
			[
				"margin",
				"margin-right"
			],
			[
				"image",
				"image_ids"
			],
			[
				"ti",
				"TISSUE"
			],
			[
				"split",
				"splitlines"
			],
			[
				"cell",
				"cell_df"
			],
			[
				"n",
				"nfeats"
			],
			[
				"ran",
				"ranked_list"
			],
			[
				"impor",
				"importances"
			],
			[
				"res",
				"results"
			],
			[
				"find_element",
				"find_element_by_xpath"
			],
			[
				"ele",
				"element_text"
			],
			[
				"find_element_",
				"find_element_by_class_name"
			]
		]
	},
	"buffers":
	[
		{
			"file": "config.py",
			"settings":
			{
				"buffer_size": 11395,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "main.py",
			"settings":
			{
				"buffer_size": 5780,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "optimize.py",
			"settings":
			{
				"buffer_size": 31204,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "metaoptimize.py",
			"settings":
			{
				"buffer_size": 2670,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import subprocess, shlex, os\n\n\ndef main():\n    \n    data_file = \"data/test_case_2.txt\"\n    method = \"mcmc-posterior-max\"\n    num_iter = 10000\n    seed_no = 1\n    \n    # an identifier for this particular run (e.g. 00120) will be inserted in place of %I (e.g. test_case_2_v00120.txt)\n    solution_file = \"solutions/test_case_2_v%I.txt\"\n    viz_file = \"images/test_case_2_viz_v%I.png\"\n    \n    # the hyperparameter choices to grid search through\n    hyperparameters = [\"perturb-strength-stddev\",\"perturb-position-stddev\",\"prior-strength-stddev\",\"prior-location-stddev\",\"prior-county-spread-stddev\"]\n    choices = dict.fromkeys(hyperparameters)\n    \n    choices[\"perturb-strength-stddev\"] = [0.1,0.5,1.0]\n    choices[\"perturb-position-stddev\"] = [0.25,1.0,5.0]\n    choices[\"prior-strength-stddev\"] = [0.1,0.25,0.5]\n    choices[\"prior-location-stddev\"] = [0.5,2.0,5.0]\n    choices[\"prior-county-spread-stddev\"] = [0.025,0.25,2.5]\n    \n    # prepare the recursive call to list_of_run_commands and generate list\n    run_command_so_far = ' '.join([\"python main.py\",\"-d\", data_file,\n                                     '-s',solution_file,\n                                     '-n',str(num_iter),\n                                     '--plot-all-counties',viz_file,\n                                     '--'+method,\n                                     '--set-seed',str(seed_no),\n                                     '--write-every-step',\n                                     '--plot-probabilities',\n                                     '--plot-positions'])\n    identifier_so_far = \"\"\n    command_list = list_of_run_commands(hyperparameters, choices, run_command_so_far, identifier_so_far)\n    \n    # run commands in parallel\n    run_in_parallel(command_list, 32)\n  \n\n\n# recursively generates a list of all combinations of hyperparameters\ndef list_of_run_commands(hyperparameters, choices, run_command_so_far, identifier_so_far):\n    \n    # base case: sub in the identifier and run\n    if len(hyperparameters) == 0:\n        run_command = run_command_so_far.replace(\"%I\", identifier_so_far)\n        return [run_command]\n    \n    # choose the hyperparameter to iterate over\n    my_hp = hyperparameters[0]\n    identifier_index = 0\n    run_command_so_far += \" --\" + my_hp + \" \"\n    \n    command_list = []\n    \n    # call grid_search for each choice of hyperparameter\n    for choice in choices[my_hp]:\n        command_list += list_of_run_commands(hyperparameters[1:], choices, run_command_so_far + str(choice), identifier_so_far + str(identifier_index))\n        identifier_index += 1\n\n    return command_list\n\n\n# run the list of commands in parallel, no more than max_processes at a time\ndef run_in_parallel(command_list, max_processes):\n    \n    processes = set()\n    \n    for command in command_list:\n        processes.add(subprocess.Popen(shlex.split(command)))\n        if len(processes) >= max_processes:\n            os.wait()\n            processes.difference_update([p for p in processes if p.poll() is not None])\n    \n\n\nif __name__ == '__main__':\n    main()\n",
			"settings":
			{
				"buffer_size": 3050,
				"line_ending": "Unix"
			}
		},
		{
			"file": "solution_io.py",
			"settings":
			{
				"buffer_size": 4665,
				"line_ending": "Unix"
			}
		},
		{
			"file": "visualize.py",
			"settings":
			{
				"buffer_size": 9401,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 17 files for \"Couldn't find county position: Number of calls to function has reached maxfev\"\n\n0 matches\n\nSearching 17 files for \"Couldn't find county position\"\n\n/Users/anders/Documents/turf/code/optimize.py:\n  420      result = leastsq(compute_error_components_for_single_county_leastsq_helper_version, old_county_position, args=args, full_output=True)\n  421      if result[4] not in (1, 2, 3, 4):\n  422:         print(\"Couldn't find county position:\", result[3])\n  423      return result[0]\n  424  \n\n1 match in 1 file\n",
			"settings":
			{
				"buffer_size": 529,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "package",
		"selected_items":
		[
			[
				"package",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/anders/Documents/turf/code"
	],
	"file_history":
	[
		"/Users/anders/Documents/MEMAboard/MEMAboard/clustergrammer_viz/clustergrammer.js",
		"/Users/anders/Documents/MEMAboard/MEMAboard/embedding-projector-standalone/clustergrammer.js",
		"/Users/anders/Documents/MEMAboard/MEMAboard/embedding-projector-standalone/index.html",
		"/Users/anders/Documents/MEMAboard/MEMAboard/.gitignore",
		"/Users/anders/Documents/MEMAboard/MEMAboard/clustergrammer_viz/index.html",
		"/Users/anders/Documents/MEMAboard/MEMAboard/oss_demo_bin.js",
		"/Users/anders/Documents/MEMAboard/MEMAboard/index.html",
		"/Users/anders/Documents/memaboard/mema_tensor_pca.py",
		"/Users/anders/Documents/memaboard/mema_flask.py",
		"/Users/anders/Documents/MEP-analysis/mema_tensor_pca.py",
		"/Users/anders/Downloads/demo_gridspec04.py",
		"/Users/anders/Documents/vitae-study/diane_data/collate_vitae_demographics.py",
		"/Users/anders/Documents/vitae-study/diane_data/retrieve_weather_data.py",
		"/Users/anders/Documents/vitae-study/delta_vitae.py",
		"/Users/anders/Documents/vitae-study/log_vitae.py",
		"/Users/anders/Documents/TKI-FDA/find_significant_ids.py",
		"/Users/anders/Documents/GATA1-Analysis/.gitignore",
		"/Users/anders/Documents/GATA1-Analysis/plot_STAT5_genes.py",
		"/Users/anders/Documents/KinomeScan/gctx2gct.py",
		"/Users/anders/Documents/GATA1-Analysis/make_enrichment_bargraph.py",
		"/Users/anders/Documents/GATA1-Analysis/gata1_immune_signature.py",
		"/Users/anders/Documents/KinomeScan/transpose_ks.py",
		"/Users/anders/Documents/KinomeScan/transpose_hms2.py",
		"/Users/anders/Documents/mepmosaic/app/static/css/style.css",
		"/Users/anders/Documents/mepmosaic/app/static/js/visualizer.js",
		"/Users/anders/Documents/mepmosaic/app/templates/index.html",
		"/Users/anders/Documents/MEPmosaic/static/js/modal.js",
		"/Users/anders/Documents/DToxS/Transcriptomics/create_vector_corrmat.py",
		"/Users/anders/Documents/TKI-FDA/SMILES_2_ECFP.py",
		"/Users/anders/Documents/TKI-FDA/relabel_GO_terms.py",
		"/Users/anders/Documents/TKI-FDA/rank_enrichment_terms.py",
		"/Users/anders/Documents/TKI-FDA/classify.py",
		"/Users/anders/Documents/GATA1-microarray/gat_chdir.py",
		"/Users/anders/Documents/DToxS/dtoxs_selenium.py",
		"/Users/anders/Documents/N2C Script Package/Network2Canvas/Network2Canvas.py",
		"/Users/anders/Documents/text_sublime.py",
		"/Users/anders/Documents/LDR/NeuroLINCS/Transcription RNA-seq/NL_genes_sym.txt"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"",
			"mema_tensor_pca.py",
			"",
			"pct"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"solution_file",
			"prior_location",
			"Couldn't find county position",
			"Couldn't find county position: Number of calls to function has reached maxfev",
			"...\"",
			"function In(",
			"then fun",
			"projectPCA",
			"In(\"Initi",
			"In(\"",
			"console.log(",
			"Ko",
			"parseMetadata",
			" In(\"",
			"this.projections.has(\"pca-0\")",
			" In(\"",
			"Promise",
			"primise",
			" In(\"",
			"In(\"Load",
			"In(\"",
			"projectPCA",
			"loadClust",
			" In(\"",
			"In(\"",
			"LoadClust",
			"In(\"",
			"function In",
			"In(\"",
			"In(",
			"console.log",
			"In(\"",
			"Initializing",
			"vo",
			" In(",
			"In(null",
			"loadClust",
			"Parsing metadata...",
			"notify-msg",
			"metadata",
			"notify-msg-metadata",
			"notify-msg-tensor",
			"qn.setModalMessage",
			"loadcluster",
			" wn(",
			"wn(",
			"wn()",
			" wn()",
			"notification-dialog",
			"wn",
			"notification-dialog",
			"showpca",
			"notification-dialog",
			"notification-panel",
			"notification",
			"wn",
			"notification-dialog",
			"projectPCA",
			"computing pca",
			"z-index",
			"resize",
			"resize_viz",
			"spillover",
			"scatter",
			"min ",
			"1039",
			"clustergram",
			"resize",
			"make_modals",
			"\"remove\"",
			"dendro_callback",
			"modal",
			"stage",
			"notifyresize",
			"notifyResize",
			".remove()",
			"clustergram-",
			"screen",
			"resize",
			".remove();",
			"\"notifyResize ",
			"notifyResize",
			"resize",
			"_boundNotifyResize",
			"resize",
			"_fireResize",
			"notifyResize",
			"resize",
			"onResize",
			"resize",
			"canvas",
			"resize",
			"stage",
			"clustergram-container",
			"changed",
			"datachange",
			"_dataProtoChanged",
			"tensor",
			"loadCluster",
			"oss_test",
			"oss_data",
			"\"dblclick\"",
			"doubleclick",
			"selectedtensor",
			"tensor",
			"resize",
			"selectedtensor",
			"_selectedTensorChanged",
			"selectedtensor",
			"tensor",
			"\"click\"",
			"paper-input-container",
			"paper-input-container-2",
			"selectedtensor",
			"stage",
			"scatter",
			"projector.DataSet",
			"DataPanel",
			"load cl",
			"selectedTensor",
			"DataPanel",
			"load clu",
			"inspectorPanel",
			"Sq",
			"getCurrentState",
			"setProjection",
			"get",
			"getEmbeddingInfoByName"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"'",
			"\"",
			"mean",
			"median",
			"score_",
			"min_pcr",
			"pcr_data",
			"pct",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"folders":
	[
		{
			"path": "/Users/anders/Documents/turf/code"
		}
	],
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "config.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11395,
						"regions":
						{
						},
						"selection":
						[
							[
								5176,
								5168
							]
						],
						"settings":
						{
							"git_gutter_enabled": true,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 146.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "main.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5780,
						"regions":
						{
						},
						"selection":
						[
							[
								5576,
								5594
							]
						],
						"settings":
						{
							"git_gutter_enabled": true,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1030.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "optimize.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31204,
						"regions":
						{
						},
						"selection":
						[
							[
								5618,
								5611
							]
						],
						"settings":
						{
							"git_gutter_enabled": true,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1332.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "metaoptimize.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2670,
						"regions":
						{
						},
						"selection":
						[
							[
								1706,
								1706
							]
						],
						"settings":
						{
							"git_gutter_enabled": true,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3050,
						"regions":
						{
						},
						"selection":
						[
							[
								3050,
								3050
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 290.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "solution_io.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4665,
						"regions":
						{
						},
						"selection":
						[
							[
								1232,
								1251
							]
						],
						"settings":
						{
							"git_gutter_enabled": true,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "visualize.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9401,
						"regions":
						{
						},
						"selection":
						[
							[
								4740,
								4758
							]
						],
						"settings":
						{
							"git_gutter_enabled": true,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1622.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 7,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 529,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										430,
										459
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								115,
								115
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 2,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 45.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 25.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"indx",
				"clustergrammer_viz/index.html"
			],
			[
				"",
				".gitignore"
			],
			[
				"load",
				"clustergrammer_viz/js/load_clustergram.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 87.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 392.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 244.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
